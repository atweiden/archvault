# Configuration file for runtime kernel parameters.
# See sysctl.conf(5) for more information.

# Protect against privilege escalations via link tomfoolery.
fs.protected_hardlinks = 1
fs.protected_symlinks = 1

# Forbid access to kernel logs without the CAP_SYS_ADMIN capability.
kernel.dmesg_restrict = 1

# Disable SysRq key to avoid console security issues.
kernel.sysrq = 0

# Controls whether core dumps will append the PID to the core
# filename. Useful when e.g. debugging multi-threaded applications.
kernel.core_uses_pid = 1

# Don't accept ICMP redirects. Prevents MITM attacks.
net.ipv4.conf.all.accept_redirects = 0
net.ipv4.conf.default.accept_redirects = 0
net.ipv4.conf.all.secure_redirects = 0
net.ipv4.conf.default.secure_redirects = 0
net.ipv6.conf.all.accept_redirects = 0
net.ipv6.conf.default.accept_redirects = 0

# Don't send ICMP redirects because we are not a router.
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0

# Don't accept IP source route packets because we are not a
# router. Protects against spoofed TCP connections.
net.ipv4.conf.all.accept_source_route = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0
net.ipv6.conf.default.accept_source_route = 0

# Don't relay bootp.
net.ipv4.conf.all.bootp_relay = 0

# Don't flush all addresses on an interface when the primary address
# is removed.
net.ipv4.conf.all.promote_secondaries = 1
net.ipv4.conf.default.promote_secondaries = 1

# Strict mode as defined in RFC3704 Strict Reverse Path.
# https://wiki.ubuntu.com/ImprovedNetworking/KernelSecuritySettings
#   Checks our routing table against the source address of incoming packets
#   to make sure that they're coming from the interface our routing table
#   says that address is on. Note that this needs to be easily disabled; if
#   some form of advanced routing or policy routing intends traffic from a
#   host to come in one interface and traffic to that host to leave out a
#   different interface, then legitimate packets will be dropped.
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.rp_filter = 1

# Disable packet forwarding. Enable for WireGuard.
net.ipv4.ip_forward = 0
net.ipv4.conf.all.forwarding = 0
net.ipv4.conf.default.forwarding = 0
net.ipv6.conf.all.forwarding = 0
net.ipv6.conf.default.forwarding = 0

# Don't proxy ARP/NDP. Enable for WireGuard.
net.ipv4.conf.all.proxy_arp = 0
net.ipv4.conf.default.proxy_arp = 0
net.ipv6.conf.all.proxy_ndp = 0
net.ipv6.conf.default.proxy_ndp = 0

# Turn on dynamic IP addressing. Let masquerading switch the source
# address of packets.
# https://linuxgazette.net/68/tag/1.html
# 0 - Switch off special handling of dynamic addresses (Default)
# 1 - Enable rewriting in quiet mode
# 3 - Enable rewriting in verbose mode
# 5 - Enable quiet RST-provoking mode
# 7 - Enable verbose RST-provoking mode (for WireGuard)
#net.ipv4.ip_dynaddr = 7

# Prevent errors from TIME_WAIT assassination.
net.ipv4.tcp_rfc1337 = 1

# Flush routing cache. Ensure immediately subsequent connections use
# the new values.
net.ipv4.route.flush = 1
net.ipv6.route.flush = 1

# Enable Path MTU discovery, a technique to determine the largest Maximum
# Transfer Unit possible on your path.
net.ipv4.ip_no_pmtu_disc = 0

# Enable Selective ACK to signify specific packets are missing. Quickens
# recovery.
net.ipv4.tcp_sack = 1

# Enable Forward Acknowledgment. Works with Selective Acknowledgment.
# Intel recommends always enabling.
net.ipv4.tcp_fack = 1

# ECN allows end-to-end notification of network congestion without
# dropping packets. It is a nice RFC, but in real life we have a lot of
# crappy network hardware, so disable it.
net.ipv4.tcp_ecn = 0

# Disable(1) the PreQueue entirely. Ideal for slow wifi networks.
# Enable(0) to instruct the TCP/IP stack to prefer low latency instead
# of high throughput. IBM recommends enabling.
net.ipv4.tcp_low_latency = 1

# Enable Forward RTO-Recovery (F-RTO) defined in RFC4138. F-RTO is an
# enhanced recovery algorithm for TCP retransmission timeouts. It is
# usually good to use in wireless environments where packet loss is
# typically due to random radio interference rather than intermediate
# router congestion.
#   1 - basic version is enabled, sometimes improves performance.
#   2 - enables SACK-enhanced F-RTO if flow uses SACK. (Default)
net.ipv4.tcp_frto = 2

# This parameter is deprecated on some distributions.
# 0 - Rate halving based; a smooth and conservative response, results
#     in halved cwnd and ssthresh after one RTT. (Default)
# 1 - Very conservative response; not recommended because even though
#     it is valid, it interacts poorly with the rest of Linux TCP,
#     halves cwnd and ssthresh immediately.
# 2 - Aggressive response; undoes congestion control measures that
#     are now known to be unnecessary (ignoring the possibility of a
#     lost retransmission that would require TCP to be more cautious),
#     cwnd and ssthresh are restored to the values prior timeout.
net.ipv4.tcp_frto_response = 2

# Enable TCP Fast Open (RFC7413) to send and accept data in the opening
# SYN-packet. Does not affect unsupported hosts, but quickens handshake
# for supported hosts. Using the value 3 instead of the default 1 allows
# TCP Fast Open for both incoming and outgoing connections.
net.ipv4.tcp_fastopen = 3

# Protection from SYN flood attacks; SYN cookies are only used as
# a fallback.
# Note: It may also impact IPv6 TCP sessions.
# Note: It is evil to use this on high-load servers.
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_syn_retries = 2
net.ipv4.tcp_synack_retries = 2

# See evil packets in your logs.
net.ipv4.conf.all.log_martians = 1
net.ipv4.conf.default.log_martians = 1

# Ignore ICMP broadcasts.
net.ipv4.icmp_echo_ignore_broadcasts = 1

# Don't ignore directed pings.
net.ipv4.icmp_echo_ignore_all = 0

# Protect against bad error messages.
net.ipv4.icmp_ignore_bogus_error_responses = 1

# Disable IPv6 because it is evil.
#net.ipv6.conf.all.disable_ipv6 = 1
#net.ipv6.conf.default.disable_ipv6 = 1
#net.ipv6.conf.lo.disable_ipv6 = 1

# Tune IPv6.
net.ipv6.conf.all.accept_dad = 0
net.ipv6.conf.default.accept_dad = 0
net.ipv6.conf.all.accept_ra = 0
net.ipv6.conf.default.accept_ra = 0
net.ipv6.conf.all.accept_ra_defrtr = 0
net.ipv6.conf.default.accept_ra_defrtr = 0
net.ipv6.conf.all.accept_ra_pinfo = 0
net.ipv6.conf.default.accept_ra_pinfo = 0
net.ipv6.conf.all.accept_ra_rtr_pref = 0
net.ipv6.conf.default.accept_ra_rtr_pref = 0
net.ipv6.conf.all.autoconf = 0
net.ipv6.conf.default.autoconf = 0
net.ipv6.conf.all.dad_transmits = 0
net.ipv6.conf.default.dad_transmits = 0
net.ipv6.conf.all.max_addresses = 1
net.ipv6.conf.default.max_addresses = 1
net.ipv6.conf.all.router_solicitations = 0
net.ipv6.conf.default.router_solicitations = 0

# Enable IPv6 Privacy Extensions.
net.ipv6.conf.all.use_tempaddr = 2
net.ipv6.conf.default.use_tempaddr = 2

# Increase the open file limit.
#fs.file-max = 65535

# Allow for more PIDs (to reduce rollover problems); may break some
# programs 32768.
#kernel.pid_max = 65536

# Make content of /proc/<pid>/{,s}maps only visible to readers allowed
# to ptrace() the process. Usually it is useless.
#kernel.maps_protect = 1

# Enable ExecShield protection. Usually doesn't work in Ubuntu because
# it uses hardware NX when the CPU supports it or uses NX emulation in
# the kernel equivalent of the Red Hat Exec Shield patch.
#kernel.exec-shield = 1

# Enable Address Space Layout Randomization, random placement of virtual
# memory regions. Mitigates certain types of buffer overflow attacks.
# 2 - Randomize the positions of the stack, VDSO page, shared memory
#     regions, and the data segment.
kernel.randomize_va_space = 2

# Controls the default max size of queue and default max size of message.
# Values are from IBM DB2 user manual.
kernel.msgmnb = 65535
kernel.msgmax = 65535

# Set the system-wide maximum number of shared memory segments. Oracle
# and IBM recommend 4096.
# kernel.shmmni = 256*<total_memory_in_GB>
#kernel.shmmni = 4096

# Define the maximum size in bytes of a single shared memory segment
# that a Linux process can allocate in its virtual address space.
# kernel.shmmax = <total_memory_in_bytes>.
#kernel.shmmax = 17179869184

# Set the total amount of shared memory pages that can be used
# system-wide.
# kernel.shmall = 2*<shmmax>/<PAGE_SIZE> or greater
#kernel.shmall = 8388608

# Customize Semaphores.
# <SEMMSL> = Oracle recommends SEMMSL be >= 250.
# <SEMMNS> = <SEMMSL>*<SEMMNI> Oracle recommends SEMMNS be >= 32000.
# <SEMOPM> = Oracle recommends SEMOPM be >= 100.
# <SEMMNI> = <total_memory_in_GB>*256 Oracle recommends SEMMNI be >= 128.
# kernel.sem = <SEMMSL> <SEMMNS> <SEMOPM> <SEMMNI>
#kernel.sem = 250 1024000 100 4096

# Set number of message queue identifiers.
# kernel.msgmni = 1024*<total_memory_in_GB>
#kernel.msgmni = 16384

# Indicates whether to place restrictions on exposing kernel addresses
# via /proc and other interfaces.
kernel.kptr_restrict = 1

# 0 - (default) - Traditional behaviour. Any process which has changed
# privilege levels or is execute-only will not be dumped.
# 1 - (debug only) - All processes dump core when possible. The core dump is
# owned by the current user and no security is applied.
# 2 - (suidsafe) - Any binary which can normally not be dumped is dumped
# readable by root only. End user can remove such a dump but not access
# it directly.
fs.suid_dumpable = 0

# Increase size of file handles and inode cache.
# fs.file-max = <_PHYS_PAGES>*<PAGE_SIZE>/1024/10.
#fs.file-max = 785928

# Try to reuse time-wait connections, but don't recycle them (recycle
# can break clients behind NAT).
net.ipv4.tcp_tw_recycle = 0
net.ipv4.tcp_tw_reuse = 1

# Avoid falling back to slow start after a connection goes idle. Keep
# it set to 0 usually.
net.ipv4.tcp_slow_start_after_idle = 0

# Increase Linux auto-tuning TCP buffer limits.
# Set max to 16MB buffer (16777216) for 1GE network.
#net.core.rmem_max = 16777216
#net.core.wmem_max = 16777216
#net.core.rmem_default = 16777216
#net.core.wmem_default = 16777216
#net.core.optmem_max = 40960
#net.ipv4.tcp_rmem = 4096 87380 16777216
#net.ipv4.tcp_wmem = 4096 65536 16777216

# Instructing a 10GE-capable host to consume a maximum of 32M-64M per
# socket ensures parallel streams work well and don't consume a majority
# of system resources.
# Set max 32MB buffer (33554432) for 10GE network.
#net.core.rmem_max = 33554432
#net.core.wmem_max = 33554432
#net.core.rmem_default = 33554432
#net.core.wmem_default = 33554432
#net.core.optmem_max = 40960
#net.ipv4.tcp_rmem = 4096 87380 33554432
#net.ipv4.tcp_wmem = 4096 65536 33554432

# If you have a lot of memory, set max 54MB buffer (56623104) for 10GE
# network.
#net.core.rmem_max = 56623104
#net.core.wmem_max = 56623104
#net.core.rmem_default = 56623104
#net.core.wmem_default = 56623104
#net.core.optmem_max = 40960
#net.ipv4.tcp_rmem = 4096 87380 56623104
#net.ipv4.tcp_wmem = 4096 65536 56623104

# Set UDP parameters. Adjust them for your network.
#net.ipv4.udp_mem = 8388608 12582912 16777216
#net.ipv4.udp_rmem_min = 65536
#net.ipv4.udp_wmem_min = 65536

# Use BBR congestion control algorithm with Fair Queue CoDel.
net.core.default_qdisc=fq_codel
net.ipv4.tcp_congestion_control=bbr

# Enable more accurate timestamps. Makes TCP congestion control algorithms
# work better. Recommended for fast networks.
net.ipv4.tcp_timestamps = 1

# Enable smart MTU black hole detection.
# Detect ICMP black holes and adjust the path MTU.
net.ipv4.tcp_mtu_probing = 1
# Bump starting MSS used in discovery to RFC4821 suggested 1024.
net.ipv4.tcp_base_mss = 1024

# Set max number of queued connections on a socket. The default value
# usually is too low. Raise this value substantially to support bursts
# of requests.
net.core.somaxconn = 8192

# Enable TCP window scaling for high-throughput, blazing fast TCP
# performance.
net.ipv4.tcp_window_scaling = 1

# Decrease the time default value for tcp_fin_timeout connection.
net.ipv4.tcp_fin_timeout = 10

# Decrease the time default value for connections to keep alive.
net.ipv4.tcp_keepalive_time = 512
net.ipv4.tcp_keepalive_probes = 10
net.ipv4.tcp_keepalive_intvl = 32

# Limit orphans because each orphan can eat up to 16M of unswappable
# memory.
net.ipv4.tcp_max_orphans = 16384
net.ipv4.tcp_orphan_retries = 0

# Increase the maximum memory used to reassemble IP fragments.
net.ipv4.ipfrag_high_thresh = 589824
net.ipv4.ipfrag_low_thresh = 524288

# Increase size of RPC datagram queue length.
net.unix.max_dgram_qlen = 512

# Don't allow the arp table to become bigger than this.
net.ipv4.neigh.default.gc_thresh3 = 4096

# Tell the gc when to become aggressive with arp table cleaning.
net.ipv4.neigh.default.gc_thresh2 = 2048

# Adjust where the gc will leave arp table alone.
net.ipv4.neigh.default.gc_thresh1 = 1024

# Adjust to arp table gc to cleanup more often.
net.ipv4.neigh.default.gc_interval = 30

# Increase TCP queue length in order to reduce a performance spike with
# relation to timestamps generation.
net.ipv4.neigh.default.proxy_qlen = 96
net.ipv4.neigh.default.unres_qlen = 6

# Increase allowable size of backlog for incoming connections. Try up
# to 262144.
net.core.netdev_max_backlog = 16384

# Set max number half open SYN requests to keep in memory.
net.ipv4.tcp_max_syn_backlog = 8192

# Don't cache ssthresh from previous connection.
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# Tweak the port range used for outgoing connections.
net.ipv4.ip_local_port_range = 2000 65535

# Alter disk syncing and swap behavior.
#vm.vfs_cache_pressure = 100
#vm.laptop_mode = 0
#vm.swappiness = 60

# To avoid long IO stalls for write cache in a real life situation
# with different workloads, we typically want to limit the kernel dirty
# cache size.
# vm.dirty_background_ratio = 0.25..0.5 * <dirty_ratio>
vm.dirty_background_ratio = 5
vm.dirty_ratio = 10

# Turn off the OOM killer by default.
vm.overcommit_memory = 2
# Allocate up to 97% of physical memory.
vm.overcommit_ratio = 97

# Specify the minimum virtual address a process is allowed to mmap. Helps
# avoid "kernel NULL pointer dereference" defects.
vm.mmap_min_addr = 4096

# Keep at least 128MB of free RAM space available. When set to its default
# value, it is possible to encounter memory exhaustion symptoms when
# free memory should in fact be available. Setting <vm.min_free_kbytes>
# to 5-6% of the total physical memory but no more than 2GB can prevent
# this problem.
vm.min_free_kbytes = 131072

# Tweak how the flow of kernel messages is throttled.
#kernel.printk_ratelimit_burst = 10
#kernel.printk_ratelimit = 5

# Reboot 600 seconds after kernel panic or oops.
#kernel.panic_on_oops = 1
#kernel.panic = 600

# Have the CD-ROM close when you use it, and open when you are done.
#dev.cdrom.autoclose = 1
#dev.cdrom.autoeject = 1
