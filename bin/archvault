#!/usr/bin/env perl6




use v6;
use Archvault;
use Archvault::Utils;




# -----------------------------------------------------------------------------
# disable-cow
# -----------------------------------------------------------------------------

multi sub MAIN(
    'disable-cow',
    Str :c(:$clean),
    Str :g(:$group),
    Str :p(:$permissions),
    Str :r(:$recursive),
    Str :u(:$user),
    *@directory
    --> Nil
)
{
    my %opt;
    %opt<clean> = $clean if $clean;
    %opt<group> = $group if $group;
    %opt<permissions> = $permissions if $permissions;
    %opt<recursive> = $recursive if $recursive;
    %opt<user> = $user if $user;
    Archvault::Utils.disable-cow(@directory, |%opt);
}




# -----------------------------------------------------------------------------
# gen-pass-hash
# -----------------------------------------------------------------------------

multi sub MAIN('gen-pass-hash', Str:D :p(:$pass)!, Bool :g(:$grub) --> Nil)
{
    say(Archvault::Utils.gen-pass-hash($pass, :$grub));
}

multi sub MAIN('gen-pass-hash', Bool :g(:$grub) --> Nil)
{
    say(Archvault::Utils.prompt-pass-hash(:$grub));
}




# -----------------------------------------------------------------------------
# help
# -----------------------------------------------------------------------------

multi sub MAIN('help', 'disable-cow' --> Nil)
{
    USAGE('disable-cow');
}

multi sub MAIN('help', 'gen-pass-hash' --> Nil)
{
    USAGE('gen-pass-hash');
}

multi sub MAIN('help', 'ls' --> Nil)
{
    USAGE('ls');
}

multi sub MAIN('help', 'new' --> Nil)
{
    USAGE('new');
}

multi sub MAIN('help', $? --> Nil)
{
    USAGE();
}




# -----------------------------------------------------------------------------
# new
# -----------------------------------------------------------------------------

multi sub MAIN(
    'new',
    *%opts (
        Str :admin-name($),
        Str :admin-pass($),
        Str :admin-pass-hash($),
        Bool :augment($),
        Str :disk-type($),
        Str :graphics($),
        Str :grub-name($),
        Str :grub-pass($),
        Str :grub-pass-hash($),
        Str :guest-name($),
        Str :guest-pass($),
        Str :guest-pass-hash($),
        Str :hostname($),
        Str :keymap($),
        Str :locale($),
        Str :partition($),
        Str :processor($),
        Bool :reflector($),
        Str :root-pass($),
        Str :root-pass-hash($),
        Str :sftp-name($),
        Str :sftp-pass($),
        Str :sftp-pass-hash($),
        Str :timezone($),
        Str :vault-name($),
        Str :vault-pass($)
    )
    --> Nil
)
{
    Archvault.new(|%opts);
}




# -----------------------------------------------------------------------------
# ls
# -----------------------------------------------------------------------------

multi sub MAIN('ls', 'keymaps' --> Nil)
{
    Archvault::Utils.ls-keymaps.map({ .say });
}

multi sub MAIN('ls', 'locales' --> Nil)
{
    Archvault::Utils.ls-locales.map({ .say });
}

multi sub MAIN('ls', 'partitions' --> Nil)
{
    Archvault::Utils.ls-partitions.map({ .say });
}

multi sub MAIN('ls', 'timezones' --> Nil)
{
    Archvault::Utils.ls-timezones.map({ .say });
}




# -----------------------------------------------------------------------------
# version
# -----------------------------------------------------------------------------

multi sub MAIN(Bool:D :version($)! where *.so --> Nil)
{
    printf("v%s\n", $Archvault::VERSION);
    exit(0);
}




# -----------------------------------------------------------------------------
# usage
# -----------------------------------------------------------------------------

multi sub USAGE(--> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      archvault disable-cow <dir> <dir>...
      archvault gen-pass-hash
      archvault help <command>
      archvault ls <info>
      archvault new

    Commands:
      disable-cow                 Disable copy-on-write at directory
      gen-pass-hash               Generate password hash
      help                        Show help for subcommands
      ls                          List keymaps, locales, partitions, timezones
      new                         Bootstrap Arch system with FDE

    Options:
      -h, --help                  Print this help message
      --version                   Print version and exit
    EOF
    say($HELP);
}

multi sub USAGE('disable-cow' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      archvault -c -p=700 -u=root -g=root disable-cow dir1 dir2
      archvault -r disable-cow dir1 dir2

    Options:
      -c, --clean
        remake directories from clean slate with CoW disabled
      -g, --group=<groupname>
        named group to own file (defaults to $*GROUP)
      -p, --permissions=<octal>
        octal file mode bits (defaults to 755)
      -r, --recursive
        recursively disable CoW on directory
      -u, --user=<username>
        named user to own file (defaults to $*USER)
    EOF
    say($HELP);
}

multi sub USAGE('gen-pass-hash' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      archvault [-g|--grub] [-p|--pass=<password>] gen-pass-hash

    Options:
      -g,--grub
        generate PBKDF2 password hash for Grub
      -p, --pass=<password>
        plaintext password to generate hash from
    EOF
    say($HELP);
}

multi sub USAGE('ls' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      archvault ls <keymaps|locales|partitions|timezones>
    EOF
    say($HELP);
}

multi sub USAGE('new' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      archvault --admin-name="live"                                  \
                --admin-pass="your admin user's password"            \
                --guest-name="guest"                                 \
                --guest-pass="your guest user's password"            \
                --sftp-name="variable"                               \
                --sftp-pass="your sftp user's password"              \
                --grub-name="grub"                                   \
                --grub-pass="your grub user's password"              \
                --root-pass="your root password"                     \
                --vault-name="vault"                                 \
                --vault-pass="your LUKS encrypted volume's password" \
                --hostname="vault"                                   \
                --partition="/dev/sdb"                               \
                --processor="other"                                  \
                --graphics="intel"                                   \
                --disk-type="usb"                                    \
                --locale="en_US"                                     \
                --keymap="us"                                        \
                --timezone="America/Los_Angeles"                     \
                --augment                                            \
                new

    Options:
      --admin-name=<username>       user name for admin account
      --admin-pass=<password>       password for admin account
      --admin-pass-hash=<passhash>  encrypted password hash for admin account
      --augment                     drop to Bash console mid-execution
      --disk-type=<disktype>        hard drive type
      --graphics=<graphics>         graphics card type
      --grub-name=<username>        user name for Grub
      --grub-pass=<password>        password for Grub
      --grub-pass-hash=<passhash>   password hash for Grub
      --guest-name=<username>       user name for guest account
      --guest-pass=<password>       password for guest account
      --guest-pass-hash=<passhash>  encrypted password hash for guest account
      --hostname=<hostname>         hostname
      --keymap=<keymap>             keymap
      --locale=<locale>             locale
      --partition=<device-path>     partition target for install
      --processor=<processor>       processor type
      --reflector                   optimize Pacman mirrors
      --root-pass=<password>        password for root account
      --root-pass-hash=<passhash>   encrypted password hash for root account
      --sftp-name=<username>        user name for SFTP account
      --sftp-pass=<password>        password for SFTP account
      --sftp-pass-hash=<passhash>   encrypted password hash for SFTP account
      --timezone=<timezone>         timezone
      --vault-name=<vault-name>     name for LUKS encrypted volume
      --vault-pass=<password>       password for LUKS encrypted volume
    EOF
    say($HELP);
}

# vim: set filetype=perl6 foldmethod=marker foldlevel=0:
